""" 
 2012-06-28:
  * Removed the TABLE variable and renamed it as TBL
  * Most of the parameters 
  * Create underscore functions and organized functions
  * Create UNIT test file 
"""

def MySQL_cfg(cfg=None, title=None):
    import os, getpass
    if title!=None:
        print title
    if cfg==None:
        cfg = {}
    if "host" not in cfg:
        cfg["host"] = raw_input("host: ")
    if "user" not in cfg:
        cfg["user"] = raw_input("user: ")
    if "passwd" not in cfg:
        cfg["passwd"] = getpass.getpass("passwd: ")
    if "db" not in cfg:
        cfg["db"] = raw_input("db: ")
    return cfg



class SQLite:
    """ 
    The following is a wrapper for sqlite3, a commonly used library for creating
    transportable relational databases
     * Syntax can be found @ http://www.sqlite.org
     * Python documentation can be found @ http://docs.python.org/library/sqlite3.html
    """
    def __init__(self, db=":memory:", tbl="main"):
        """ 
        Creates and opens a database connection for
        "db" and default the table to "tbl"

        Args:
          db: the location of the database
          tbl: the name of the primary table
        Returns: Nothing
          Sets self variables such as tbl, db, c (cursor), conn (connect)
        """
        import sqlite3
        self.db = db
        self.tbl = tbl
        self.conn = sqlite3.connect(self.db)
        self.c = self.conn.cursor()

    def __del__(self):
        """ 
        Destructor running similar to a Garbage Collector
        """
        self.close()

    #-------------------------------------HIDDEN METHODS

    def _dbAdd(self, db=None, tbl=None):
        """ 
        IF db exists, db.tbl ELSE tbl
        Args:
          db: database name
          tbl: table name
        """
        str = ""
        if db:
            str += (db+".")
        str += (not tbl) and self.tbl or tbl
        return str

    def _decode(self, list):
        """ 
        TODO: Is this necessary?  What does this really do?
        """
        try:
            return [x.decode("iso-8859-1") for x in list]
        except:
            return list

    def _sqlmasterScan(self, var, type, lookup=None, db=None, seq=None):
        """ 
        Returns a list of items that exist within the database.
        *since SQLite is not case sensitive, lowercases everything

        Arg
          var: field to return
          type: type in database such as table, index
          db: consider a specific database?
          lookup: are we considering a specific item?
          seq: returns a range of indexes for numbering purposes
        Returns:
          a list of names that exist within the database.
          unless lookup specified: true or false
        """
        self.c.execute(""" 
            SELECT {var} FROM {table} 
             WHERE type='{type}' ORDER BY {var}
            """.format(var=var, type=type,
              table=self._dbAdd(db=db, tbl="sqlite_master"))) #"""
        list = [x[0].lower() for x in self.c]
        if seq:
            import re
            nums = []
            for x in list:
                if x.find(seq)==0:
                    d = re.findall('[0-9]+$', x)
                    if not d:
                        nums.append(1)
                    else:
                        nums.append(int(d[-1]))
            if not nums:
                return [0, 0]
            else:
                return [min(nums), max(nums)]

        elif not lookup:
            return list
        else:
            return lookup.lower() in list

    #-------------------------------------BASIC ACTIONS

    def close(self):
        """ 
        Initiates a final commit (assumption, we want to commit data)
        Closes the appropriate cursors and connections 
        *chosen not to TEST this method
        """
        self.commit()
        self.c.close()
        self.conn.close()

    def optimize(self):
        """ 
        Optimize based on guidance found on the following:
          http://web.utk.edu/~jplyon/sqlite/SQLite_optimization_FAQ.html
        *chosen not to TEST this method
        """
        self.c.executescript(""" 
            PRAGMA cache_size=2000000;
            PRAGMA synchronous=OFF;
            PRAGMA temp_store=2;
            """) #"""

    def chgTbl(self, tbl):
        """ 
        Allows a user to change their default table
        *chosen not to TEST this method
        """
        self.tbl = tbl

    def commit(self):
        """ 
        Alias to self.conn.commit()
        *chosen not to TEST this method
        """
        self.conn.commit()

    def vacuum(self):
        """ 
